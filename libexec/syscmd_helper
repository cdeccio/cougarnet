#!/usr/bin/env python3
#
# This file is a part of Cougarnet, a tool for creating virtual networks.
#
# Copyright 2021-2022 Casey Deccio (casey@deccio.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.
#

import argparse
import asyncio
import atexit
import logging
import logging.handlers
import os
import socket
import subprocess
import sys

from cougarnet.globals import *
from cougarnet.sys_helper.cmd_helper.cmd_helper import SysCmdHelper


def _raise_int():
    raise KeyboardInterrupt()

def _try_unlink(path):
    try:
        os.unlink(path)
    except FileNotFoundError:
        # It is possible that the file has been removed by the parent process
        # before we call unlink(), so just ignore this error.
        pass

def _setup_socket(path, uid, gid):
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    try:
        sock.bind(path)
    except OSError as e:
        sys.stderr.write(f'Invalid path: {path} ({str(e)})\n')
        sys.exit(1)

    # (try to) delete the file on program exit
    atexit.register(_try_unlink, path)

    # set permissions and ownership
    try:
        subprocess.run(['chmod', '700', path], check=True)
    except subprocess.CalledProcessError as e:
        sys.stderr.write(f'Changing socket permissions unsuccessful: ({str(e)})\n')
        sys.exit(1)
    try:
        subprocess.run(['chown', f'{str(uid)}:{str(gid)}', path], check=True)
    except subprocess.CalledProcessError as e:
        sys.stderr.write(f'Changing socket ownership unsuccessful: ({str(e)})\n')
        sys.exit(1)

    # set non-blocking, so it can be used with the listener
    sock.setblocking(False)
    return sock

def _send_byte_to_stdout():
    sys.stdout.buffer.write(b'\x00')
    sys.stdout.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--uid', '-u',
            action='store', type=int,
            help='UID of the unprivileged user that should ' + \
                    'be the target of unshared processes')
    parser.add_argument('--gid', '-g',
            action='store', type=int,
            help='GID of the unprivileged group that should ' + \
                    'be the target of unshared processes')
    parser.add_argument('--verbose', '-v',
            action='store_const', const=True, default=False,
            help='Use verbose mode')
    parser.add_argument('socket',
            action='store', type=str,
            help='Socket path ')

    args = parser.parse_args(sys.argv[1:])

    # asyncio has some logging at the debug level; we explicitly decrease
    # the logging level, so it doesn't clutter up our own logging
    asyncio_logger = logging.getLogger('asyncio')
    asyncio_logger.setLevel(logging.ERROR)

    # configure logging
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.NOTSET)

    h = logging.StreamHandler()
    h.setFormatter(logging.Formatter(fmt=LOG_FORMAT))
    if args.verbose:
        h.setLevel(logging.DEBUG)
    else:
        h.setLevel(logging.INFO)
    root_logger.addHandler(h)

    # make sure we are running as root
    if os.geteuid() != 0:
        sys.stderr.write('This program must be run as root.\n')
        sys.exit(1)

    uid = int(os.environ.get('SUDO_UID', '0'))
    gid = int(os.environ.get('SUDO_GID', '0'))
    if args.uid is not None:
        uid = args.uid
    if args.gid is not None:
        gid = args.gid

    if uid == 0 or gid == 0:
        sys.stderr.write('If SUDO_UID and SUDO_GID are not set, ' + \
                'then the --uid and --gid options must be used.\n')
        sys.exit(1)

    helper = SysCmdHelper(uid, gid)
    loop = asyncio.new_event_loop()
    # exit as soon stdin is closed
    # (an indicator from our parent that we should terminate)
    loop.add_reader(sys.stdin, _raise_int)

    sock = _setup_socket(args.socket, uid, gid)

    # register the socket with the event loop
    loop.add_reader(sock, helper.handle_request, sock)

    # communicate to the parent that everything is set up
    _send_byte_to_stdout()

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        loop.close()

if __name__ == '__main__':
    main()
